import React, { useMemo, useEffect, useState, useCallback } from 'react';
import { useParams, useNavigate, useSearchParams } from 'react-router';
import {
  DndContext,
  DragOverlay,
  PointerSensor,
  useSensor,
  useSensors,
  pointerWithin,
  rectIntersection
} from '@dnd-kit/core';
import { nanoid } from 'nanoid';
import { AnimatePresence, motion } from 'framer-motion';
import { useDebouncedCallback } from 'use-debounce';

import styles from './DndCanvasBuilder.module.css';
import { BLOCK_TYPES, AVAILABLE_BLOCKS } from '../utils/constants';
import { findBlockAndParent, generatePreviewLayout, insertBlockRecursive, isAncestor, removeBlockRecursive } from '../utils/blockUtils';
import useBlockManagement from '../hooks/useBlockManagement';

import SidebarElements from './sidebar/SidebarElements';
import Canvas from './canvas/Canvas';
import PropertiesPanel from './panels/PropertiesPanel';
import StructurePanel from './panels/StructurePanel';
import DragOverlayContent from './common/DragOverlayContent';
import { useBlockManager } from '../contexts/BlockManagementContext';
import Header from './Header';

const DropIndicator = ({ indicator }) => {
    const style = {
        position: 'absolute',
        width: indicator.rect.width,
        height: '2px',
        background: '#3b82f6',
        left: indicator.rect.left,
        top: indicator.position === 'top' ? indicator.rect.top : indicator.rect.bottom,
        pointerEvents: 'none', // –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–µ—à–∞–ª —Å–æ–±—ã—Ç–∏—è–º –º—ã—à–∏
        zIndex: 10000,
    };
    return <div style={style} />;
};

export default function DndCanvasBuilder({ initialMode = 'edit' }) {
  const { slug } = useParams();
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const versionId = searchParams.get('version');

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –µ–¥–∏–Ω—ã–π –æ–±—ä–µ–∫—Ç `actions` –∏–∑ –Ω–∞—à–µ–≥–æ —Ö—É–∫–∞
  const { blocks, selectedBlockId, activeId, activeDragItem, setActiveDragItem, setOverDropZone, actions } = useBlockManager();
  const [isLoading, setIsLoading] = useState(true);
  const [isNewPage, setIsNewPage] = useState(false);
  const [pageTitle, setPageTitle] = useState('–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
  const [mode, setMode] = useState(initialMode);

  const [activeLeftPanel, setActiveLeftPanel] = useState(null);
  const [panelContent, setPanelContent] = useState(null);
  const [isPropertiesPanelVisible, setPropertiesPanelVisible] = useState(false);
  const [isAnimating, setIsAnimating] = useState(false);

  const isEditMode = mode === 'edit';

  useEffect(() => {
    if (slug === 'new') {
      setIsNewPage(true);
      actions.setBlocks([]);
      setIsLoading(false);
      return;
    }

    if (!slug) {
      setIsLoading(false);
      return;
    }

    const deepParseBlocks = (blocksToParse) => {
      if (!Array.isArray(blocksToParse)) return [];
      return blocksToParse.map(block => {
        const newBlock = { ...block };
        if (newBlock.children && typeof newBlock.children === 'string') {
          try {
            newBlock.children = deepParseBlocks(JSON.parse(newBlock.children));
          } catch (e) { newBlock.children = []; }
        } else if (Array.isArray(newBlock.children)) {
          newBlock.children = deepParseBlocks(newBlock.children);
        }
        return newBlock;
      });
    };

    const fetchPageData = async () => {
      setIsLoading(true);
      try {
        const apiUrl = versionId
          ? `http://localhost:3001/pages/${slug}?mode=${mode}&version=${versionId}`
          : `http://localhost:3001/pages/${slug}?mode=${mode}`;

        const response = await fetch(apiUrl);
        if (!response.ok) {
          if (response.status === 404) setIsNewPage(true);
          throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const { page, version } = await response.json();
        setIsNewPage(false);
        setPageTitle(page.title);

        let contentBlocks = [];
        if (version && version.content) {
          const initialParsed = typeof version.content === 'string'
            ? JSON.parse(version.content)
            : version.content;
          contentBlocks = deepParseBlocks(initialParsed);
        }
        actions.setBlocks(Array.isArray(contentBlocks) ? contentBlocks : []);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:", error.message);
        actions.setBlocks([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchPageData();
  }, [slug, mode, versionId]);

  const handleCreateNewPage = async () => {
    const title = prompt("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:");
    if (!title) return alert("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.");

    const finalSlug = (slug === 'new') ? prompt("–í–≤–µ–¥–∏—Ç–µ slug –¥–ª—è URL:", title.toLowerCase().replace(/\s+/g, '-')) : slug;
    if (!finalSlug) return alert("Slug –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.");

    try {
      const response = await fetch(`http://localhost:3001/pages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          slug: finalSlug,
          title: title,
          content: blocks,
          version_title: `–ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è: ${title}`,
          analytics_round: new Date().toISOString().slice(0, 10),
        }),
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
      await response.json();
      alert(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
      navigate(`/editor/${finalSlug}`, { replace: true });
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
    }
  };

  const handleCreateNewVersion = async () => {
    try {
      const response = await fetch(`http://localhost:3001/pages/${slug}/versions`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          content: blocks,
          version_title: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç ${new Date().toLocaleString()}`,
          analytics_round: new Date().toISOString().slice(0, 10),
        }),
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      const result = await response.json();
      alert(`–ù–æ–≤—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ID –≤–µ—Ä—Å–∏–∏: ${result.versionId}`);
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.');
    }
  };

  const handleSave = () => {
    if (isNewPage) {
      handleCreateNewPage();
    } else {
      handleCreateNewVersion();
    }
  };

  const handleToggleMode = () => {
    setMode(prev => (prev === 'edit' ? 'view' : 'edit'));
  };

  const handleToggleLeftPanel = (panelName) => {
    if (isAnimating) return;
    const currentPanel = activeLeftPanel;

    if (currentPanel && currentPanel !== panelName) {
      setIsAnimating(true);
      // 1. –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å. `panelContent` –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, —á—Ç–æ–±—ã
      // –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—à–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.
      setActiveLeftPanel(null);

      // 2. –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏...
      setTimeout(() => {
        // ...—Å–Ω–∞—á–∞–ª–∞ –º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...
        setPanelContent(panelName);
        // ...–∞ –ø–æ—Ç–æ–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–∂–µ —Å –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.
        setActiveLeftPanel(panelName);
        setIsAnimating(false);
      }, 300); // –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å `duration` –≤ `transition`
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å
      // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å –Ω—É–ª—è, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
      if (!currentPanel) {
        setPanelContent(panelName);
      }
      setActiveLeftPanel(current => (current === panelName ? null : panelName));
    }
  };

  const handleTogglePropertiesPanel = () => {
    setPropertiesPanelVisible(prev => !prev);
  };

  const sensors = useSensors(useSensor(PointerSensor, { activationConstraint: { distance: 8 } }));
  const selectedBlock = useMemo(() => findBlockAndParent(blocks, selectedBlockId)?.block || null, [blocks, selectedBlockId]);

  const customCollisionDetection = useCallback((args) => {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä
    const pointerCollisions = pointerWithin(args);
    if (pointerCollisions.length > 0) {
      return pointerCollisions;
    }
    // –ï—Å–ª–∏ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
    return rectIntersection(args);
  }, []);

  const handleDragStart = ({ active }) => {
    // –í `active` –µ—Å—Ç—å –≤—Å—è –Ω—É–∂–Ω–∞—è –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –≤–∫–ª—é—á–∞—è `data`.
    // –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç.
    setActiveDragItem(active);
    actions.setActiveId(active.id);
  };

  const handleDragCancel = useCallback(() => {
    setActiveDragItem(null);
    setOverDropZone(null);
    actions.setActiveId(null);
  }, [actions]);

  const handleDragOver = ({ over }) => {
    setOverDropZone(over);
  };

  const handleDragEnd = useCallback(({ active, over }) => {
    console.log('--- handleDragEnd: –ù–∞—á–∞–ª–æ ---');
    console.log('Active (–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç):', active);
    console.log('Over (–∑–æ–Ω–∞ —Å–±—Ä–æ—Å–∞):', over);

    // –°—Ä–∞–∑—É —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –±—Ä–æ—à–µ–Ω–æ –≤ –ø—É—Å—Ç–æ—Ç—É
    if (!over) {
      console.log('üö´ –û—Ç–º–µ–Ω–∞: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ —Ü–µ–ª–∏ (over is null). –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π.');
      setActiveDragItem(null);
      setOverDropZone(null);
      actions.setActiveId(null);
      console.log('--- handleDragEnd: –ö–æ–Ω–µ—Ü (–±–µ–∑ —Ü–µ–ª–∏) ---');
      return;
    }

    const activeData = active.data.current;
    const overData = over.data.current;

    console.log('–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (activeData):', activeData);
    console.log('–î–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã —Å–±—Ä–æ—Å–∞ (overData):', overData);

    // --- –£–°–ò–õ–ï–ù–ù–´–ô –ó–ê–©–ò–¢–ù–´–ô –ú–ï–•–ê–ù–ò–ó–ú ---
    // –Ø–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –ë–õ–û–ö–ê –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –¶–ï–õ–ò.
    if (activeData?.block?.id === overData?.targetId) {
      console.warn('üõ°Ô∏è –ó–∞—â–∏—Ç–∞: –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å –±–ª–æ–∫ –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. ID –±–ª–æ–∫–∞:', activeData?.block?.id);
      setActiveDragItem(null);
      setOverDropZone(null);
      actions.setActiveId(null);
      console.log('--- handleDragEnd: –ö–æ–Ω–µ—Ü (—Å–±—Ä–æ—Å –Ω–∞ —Å–µ–±—è) ---');
      return; // <-- –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –±—Ä–æ—Å–∏—Ç—å –±–ª–æ–∫ –Ω–∞ –Ω–µ–≥–æ –∂–µ
    }

    // --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    if (overData?.targetId) {
      console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –û–±–Ω–∞—Ä—É–∂–µ–Ω targetId:', overData.targetId);

      const isDropFromSidebar = activeData?.context === 'sidebar' && (overData?.context === 'canvas' || overData?.context === 'structure');
      const isReorderingInSameContext = activeData?.context !== 'sidebar' && activeData?.context === overData?.context;

      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:');
      console.log(`  - –°–±—Ä–æ—Å –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞? -> ${isDropFromSidebar}`);
      console.log(`  - –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ? -> ${isReorderingInSameContext}`);

      if (isDropFromSidebar || isReorderingInSameContext) {
        console.log('üëç –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –õ–∏–±–æ —Å–±—Ä–æ—Å –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞, –ª–∏–±–æ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.');

        const draggedBlock = activeData.block;
        const activeBlockId = draggedBlock?.id;
        const targetId = overData.targetId;
        const position = overData.position || overData.calculatedPosition;

        console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è:');
        console.log('  - –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –±–ª–æ–∫ (draggedBlock):', draggedBlock);
        console.log('  - ID –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ –±–ª–æ–∫–∞ (activeBlockId):', activeBlockId);
        console.log('  - ID —Ü–µ–ª–∏ (targetId):', targetId);
        console.log('  - –ü–æ–∑–∏—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ (position):', position);

        // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã
        if (activeBlockId !== targetId) {
          console.log('üõ°Ô∏è –ü—Ä–æ–π–¥–µ–Ω–∞ –≤—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ-—Å–±—Ä–æ—Å.');
          let initialBlocks = [...blocks];
          let blockToInsert = draggedBlock;

          if (activeData.isSidebarItem) {
            console.log('‚û°Ô∏è –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–∞–π–¥–±–∞—Ä–∞: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞.');
            const info = AVAILABLE_BLOCKS.find(b => b.type === activeData.type);
            if (info) {
              blockToInsert = { id: nanoid(), ...info.defaultData };
              console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', blockToInsert);
            } else {
              console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–µ –¥–ª—è —Ç–∏–ø–∞:', activeData.type);
              blockToInsert = null;
            }
          } else if (activeData.isCanvasItem || activeData.isStructureItem) {
            console.log('üîÑ –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–Ω–≤–∞—Å–∞/—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞.');
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if (draggedBlock.type === 'core/container') {
              const isMovingIntoDescendant = isAncestor(blocks, activeBlockId, targetId);
              console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∫–∞: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å (${targetId}) –ø–æ—Ç–æ–º–∫–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (${activeBlockId})? -> ${isMovingIntoDescendant}`);
              if (isMovingIntoDescendant) {
                console.warn("–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –µ–≥–æ –ø–æ—Ç–æ–º–∫–∞.");
                // –í–∞–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã–π—Ç–∏
                setActiveDragItem(null);
                setOverDropZone(null);
                actions.setActiveId(null);
                console.log('--- handleDragEnd: –ö–æ–Ω–µ—Ü (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–º–∫–∞) ---');
                return;
              }
            }
            console.log('–£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∏–∑ –µ–≥–æ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏. ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', activeBlockId);
            initialBlocks = removeBlockRecursive(blocks, activeBlockId);
            console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:', initialBlocks);
          }

          if (blockToInsert) {
            console.log('–í—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é...');
            const newBlocks = insertBlockRecursive(initialBlocks, targetId, blockToInsert, position);
            console.log('‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–æ–≤ (newBlocks):', newBlocks);
            actions.setBlocks(newBlocks);
            console.log('–î–µ–π—Å—Ç–≤–∏–µ setBlocks –≤—ã–∑–≤–∞–Ω–æ.');
          } else {
            console.warn('–ù–µ—Ç –±–ª–æ–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (blockToInsert is null). –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.');
          }
        } else {
          console.warn('üõ°Ô∏è –°—Ä–∞–±–æ—Ç–∞–ª–∞ –≤—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ-—Å–±—Ä–æ—Å. ID —Å–æ–≤–ø–∞–¥–∞—é—Ç:', activeBlockId);
        }
      } else {
        console.log('‚ùå –£—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã. –î–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
      }
    } else {
      console.log('‚ÑπÔ∏è –ù–µ—Ç targetId –≤ overData. –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –±–ª–æ–∫–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.');
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    console.log('üîÑ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π (activeDragItem, overDropZone, activeId).');
    setActiveDragItem(null);
    setOverDropZone(null);
    actions.setActiveId(null);
    console.log('--- handleDragEnd: –ö–æ–Ω–µ—Ü ---');
  }, [blocks, actions, setActiveDragItem, setOverDropZone]);

  if (isLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  const builderContent = (
    <div className={styles.builderLayout}>
      <Header
        isEditMode={isEditMode}
        onToggleMode={handleToggleMode}
        onSave={handleSave}
        pageTitle={pageTitle}
        activeLeftPanel={activeLeftPanel}
        onToggleLeftPanel={handleToggleLeftPanel}
        isPropertiesVisible={isPropertiesPanelVisible}
        onTogglePropertiesPanel={handleTogglePropertiesPanel}
      />
      <main className={styles.mainContent}>
        <AnimatePresence>
          {/* –í–∏–¥–∏–º–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è `activeLeftPanel` */}
          {isEditMode && activeLeftPanel && (
            <motion.aside
              key={activeLeftPanel}
              className={styles.panelLeft}
              initial={{ width: 0, x: '-100%' }}
              animate={{ width: 280, x: 0 }}
              exit={{ width: 0, x: '-100%' }}
              transition={{ type: 'tween', ease: 'easeInOut', duration: 0.3 }}
            >
              <div className={styles.panelContentWrapper}>
                {/* –ê –∫–æ–Ω—Ç–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è `panelContent` */}
                {panelContent === 'elements' && <SidebarElements />}
                {panelContent === 'structure' && <StructurePanel blocks={blocks} onSelect={actions.select} selectedId={selectedBlockId} />}
              </div>
            </motion.aside>
          )}
        </AnimatePresence>

        <div className={styles.canvasContainer}>
          <Canvas mode={mode} />
        </div>

        <AnimatePresence>
          {isEditMode && isPropertiesPanelVisible && (
            <motion.aside
              key="right-panel"
              className={styles.panelRight}
              initial={{ width: 0, x: '100%' }}
              animate={{ width: 280, x: 0 }}
              exit={{ width: 0, x: '100%' }}
              transition={{ type: 'tween', ease: 'easeInOut', duration: 0.3 }}
            >
              <div className={styles.panelContentWrapper}>
                <PropertiesPanel selectedBlock={selectedBlock} actions={actions} />
              </div>
            </motion.aside>
          )}
        </AnimatePresence>
      </main>
    </div>
  );

  if (isEditMode) {
    return (
      <DndContext
        sensors={sensors}
        collisionDetection={customCollisionDetection}
        onDragStart={handleDragStart}
        onDragOver={handleDragOver}
        onDragEnd={handleDragEnd}
        onDragCancel={handleDragCancel}
      >
        {builderContent}
        <DragOverlay>
          {activeDragItem ? <DragOverlayContent block={activeDragItem.data.current.block} /> : null}
        </DragOverlay>
      </DndContext>
    );
  }

  return builderContent;
}