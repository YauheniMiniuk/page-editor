// src/components/panels/StructurePanel.jsx
import React, { useState, useEffect } from 'react';
import styles from './StructurePanel.module.css';
import StructureItem from './StructureItem';
import { useBlockManager } from '../../contexts/BlockManagementContext';
import { useDroppable } from '@dnd-kit/core';
import { findBlockPath } from '../../utils/blockUtils'; // 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é

const StructurePanel = ({ structureNodesRef, dropIndicator, onSaveAsPattern }) => {
  const { blocks, actions, selectedBlockId, selectedBlock, copiedStyles } = useBlockManager();
  const [expandedIds, setExpandedIds] = useState({});

  const { setNodeRef: rootDropRef } = useDroppable({
    id: 'structure-root',
    data: { context: 'structure-root' }
  });

  const handleToggleExpand = (blockId) => {
    setExpandedIds(prev => ({ ...prev, [blockId]: !prev[blockId] }));
  };

  const handleSelect = (blockId) => {
    actions.select(blockId);
  };

  // 2. üî• –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –§–£–ù–ö–¶–ò–ï–ô
  useEffect(() => {
    if (selectedBlockId) {
      // –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –±–ª–æ–∫–æ–≤
      const pathObjects = findBlockPath(blocks, selectedBlockId);

      if (pathObjects) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤ ID –∏ —É–±–∏—Ä–∞–µ–º ID —Å–∞–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const parentIds = pathObjects.map(block => block.id).slice(0, -1);

        setExpandedIds(prevExpanded => {
          const newExpanded = { ...prevExpanded };
          parentIds.forEach(id => {
            newExpanded[id] = true;
          });
          return newExpanded;
        });
      }
    }
  }, [selectedBlockId, blocks]);

  return (
    <div className={styles.structurePanel} ref={rootDropRef}>
      <h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞</h3>
      <ul className={styles.structureUl}>
        {blocks.map(block => (
          <StructureItem
            key={block.id}
            block={block}
            level={0}
            onSelect={handleSelect}
            selectedId={selectedBlockId}
            expandedIds={expandedIds}
            onToggleExpand={handleToggleExpand}
            actions={actions}
            structureNodesRef={structureNodesRef}
            dropIndicator={dropIndicator}
            onSaveAsPattern={onSaveAsPattern}
          />
        ))}
      </ul>
    </div>
  );
};

export default StructurePanel;