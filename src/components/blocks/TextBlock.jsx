import React, { forwardRef } from 'react';
import { motion } from 'framer-motion';
import styles from './TextBlock.module.css';
import Tabs from '../../ui/Tabs';
import Tab from '../../ui/Tab';
import ColorPicker from '../../ui/ColorPicker';
import Checkbox from '../../ui/Checkbox';
import PresetOrCustomInput from '../../ui/PresetOrCustomInput';
import ToolbarButton from '../../ui/ToolbarButton';
import PresetSelector from '../../ui/PresetSelector';
import CustomUnitInput from '../../ui/CustomUnitInput';
import { AlignCenterIcon, AlignLeftIcon, AlignRightIcon, ParagraphIcon } from '../../utils/icons';
import { withBlockFeatures } from '../../hocs/withBlockFeatures';

const TextBlock = forwardRef(
  ({ block, mode, actions, className, isEditingText, onFocusOut, ...restProps }, ref) => {
    const { props = {}, content, styles: inlineStyles = {} } = block;
    const Tag = props.as || 'p';
    const MotionTag = motion[Tag] || motion.p;

    const finalClasses = [
      styles.text,
      className,
      props.hasDropCap ? styles.hasDropCap : '',
    ].filter(Boolean).join(' ');

    const handleSaveOnBlur = (e) => {
      if (actions && e.currentTarget.innerHTML !== content) {
        actions.update(block.id, { content: e.currentTarget.innerHTML });
      }
      if (onFocusOut) {
        onFocusOut(e);
      }
    };

    return (
      <MotionTag
        ref={ref}
        className={finalClasses}
        style={inlineStyles}
        contentEditable={mode === 'edit' && isEditingText}
        suppressContentEditableWarning={true}
        onBlur={handleSaveOnBlur}
        dangerouslySetInnerHTML={{ __html: content }}
        {...restProps}
      />
    );
  }
);

TextBlock.blockInfo = {
  type: 'core/text',
  label: '–ü–∞—Ä–∞–≥—Ä–∞—Ñ',
  icon: <ParagraphIcon />,

  defaultData: {
    type: 'core/text',
    content: '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫. –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç...',
    props: { as: 'p', hasDropCap: false, anchor: '' },
    variants: { textAlign: 'left', fontSize: 'normal' },
    styles: {},
  },

  supportedVariants: {
    textAlign: {
      label: '–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞',
      options: [
        { value: 'left', label: '–í–ª–µ–≤–æ', icon: <AlignLeftIcon /> },
        { value: 'center', label: '–¶–µ–Ω—Ç—Ä', icon: <AlignCenterIcon /> },
        { value: 'right', label: '–í–ø—Ä–∞–≤–æ', icon: <AlignRightIcon /> },
      ],
      defaultValue: 'left',
    },
    fontSize: {
      label: '–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞',
      options: [
        { value: 'small', label: 'S' }, { value: 'normal', label: 'M' },
        { value: 'large', label: 'L' }, { value: 'huge', label: 'XL' },
      ],
      defaultValue: 'normal',
    },
    // FIX 1: –ü–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    textColor: {
      label: '–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞',
      options: [
        { value: 'primary', label: '–ê–∫—Ü–µ–Ω—Ç' },
        { value: 'secondary', label: '–í—Ç–æ—Ä–∏—á–Ω—ã–π' }
      ],
    },
    backgroundColor: {
      label: '–¶–≤–µ—Ç —Ñ–æ–Ω–∞',
      options: [
        { value: 'light-gray', label: '–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π' },
        { value: 'light-accent', label: '–°–≤–µ—Ç–ª—ã–π –∞–∫—Ü–µ–Ω—Ç' }
      ],
    },
  },

  getToolbarItems: ({ block, actions }) => {
    const { variants = {} } = block;
    const updateVariant = (name, value) => actions.update(block.id, { variants: { ...variants, [name]: value } });

    const handleFormat = (e, command) => {
      e.preventDefault(); // –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –±–ª–æ–∫ –Ω–µ —Ç–µ—Ä—è–ª —Ñ–æ–∫—É—Å
      document.execCommand(command, false, null);
    };

    const alignmentIcons = {
      left: <AlignLeftIcon />,
      center: <AlignCenterIcon />,
      right: <AlignRightIcon />,
    };

    return (
      <>
        <div className="toolbarButtonGroup">
          {TextBlock.blockInfo.supportedVariants.textAlign.options.map(opt => (
            <ToolbarButton
              key={opt.value}
              title={opt.label}
              isActive={(variants.textAlign || 'left') === opt.value}
              onClick={() => updateVariant('textAlign', opt.value)}
            >
              {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ –æ–±—ä–µ–∫—Ç–∞ */}
              {alignmentIcons[opt.value]}
            </ToolbarButton>
          ))}
        </div>

        <div className="toolbarSeparator"></div>

        <div className="toolbarButtonGroup">
          {/* üëá –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º button –Ω–∞ ToolbarButton */}
          <ToolbarButton title="–ñ–∏—Ä–Ω—ã–π" onMouseDown={(e) => handleFormat(e, 'bold')}>
            <b>B</b>
          </ToolbarButton>
          <ToolbarButton title="–ö—É—Ä—Å–∏–≤" onMouseDown={(e) => handleFormat(e, 'italic')}>
            <i>I</i>
          </ToolbarButton>
          <ToolbarButton title="–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π" onMouseDown={(e) => handleFormat(e, 'underline')}>
            <u>U</u>
          </ToolbarButton>
        </div>
      </>
    );
  },

  getEditor: ({ block, onChange }, helpers) => {
    const { props = {}, styles = {}, variants = {} } = block;

    const updateVariants = (newVariants) => helpers.updateVariant(null, { ...variants, ...newVariants });
    const handlePropsChange = (newProps) => onChange({ props: { ...props, ...newProps } });
    const handleStyleChange = (newStyles) => onChange({ styles: { ...styles, ...newStyles } });

    // FIX 1: –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–≤–µ—Ç–∞
    const handleColorChange = (type, value, isFromPalette) => {
      if (isFromPalette) {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª—å
        onChange({
          variants: { ...variants, [type]: value },
          styles: { ...styles, [type === 'textColor' ? 'color' : 'backgroundColor']: undefined },
        });
      } else {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ü–≤–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Å—Ç–∞–≤–∏–º –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª—å
        onChange({
          variants: { ...variants, [type]: undefined },
          styles: { ...styles, [type === 'textColor' ? 'color' : 'backgroundColor']: value },
        });
      }
    };

    // FIX 3: –õ–æ–≥–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º —à—Ä–∏—Ñ—Ç–∞
    const handleFontSizeChange = (newValue) => {
      const isPreset = TextBlock.blockInfo.supportedVariants.fontSize.options.some(p => p.value === newValue);
      if (isPreset) {
        onChange({
          variants: { ...variants, fontSize: newValue },
          styles: { ...styles, fontSize: undefined }
        });
      } else {
        onChange({
          variants: { ...variants, fontSize: undefined },
          styles: { ...styles, fontSize: newValue }
        });
      }
    };

    return (
      <Tabs>
        <Tab title="–°—Ç–∏–ª–∏">
          <h4>–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞</h4>
          <PresetOrCustomInput
            label="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
            presets={TextBlock.blockInfo.supportedVariants.fontSize.options}
            value={variants.fontSize || styles.fontSize || ''}
            onChange={handleFontSizeChange}
          />
          <CustomUnitInput
            label="–í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏"
            value={styles.lineHeight || ''}
            onChange={(val) => handleStyleChange({ lineHeight: val })}
            units={['', 'em', 'rem', 'px']}
          />
          <CustomUnitInput
            label="–ú–µ–∂–±—É–∫–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª"
            value={styles.letterSpacing || ''}
            onChange={(val) => handleStyleChange({ letterSpacing: val })}
            units={['px', 'em', 'rem']}
          />
          <Checkbox
            label="–ù–∞—á–∞—Ç—å —Å –±—É–∫–≤–∏—Ü—ã"
            checked={!!props.hasDropCap}
            onChange={(e) => handlePropsChange({ hasDropCap: e.target.checked })}
          />
          <hr />
          <h4>–û—Ç—Å—Ç—É–ø—ã</h4>
          <CustomUnitInput
            label="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã (padding)"
            value={styles.padding || ''}
            onChange={(val) => handleStyleChange({ padding: val })}
          />
        </Tab>
        <Tab title="–¶–≤–µ—Ç">
          {/* FIX 1: –ù–æ–≤—ã–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª –¥–ª—è —Ü–≤–µ—Ç–∞ */}
          <h4>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</h4>
          <PresetSelector
            options={TextBlock.blockInfo.supportedVariants.textColor.options}
            value={variants.textColor}
            onChange={(val) => handleColorChange('textColor', val, true)}
          />
          <ColorPicker
            label="–°–≤–æ–π —Ü–≤–µ—Ç"
            value={styles.color || ''}
            onChange={(color) => handleColorChange('textColor', color, false)}
          />
          <hr />
          <h4>–¶–≤–µ—Ç —Ñ–æ–Ω–∞</h4>
          <PresetSelector
            options={TextBlock.blockInfo.supportedVariants.backgroundColor.options}
            value={variants.backgroundColor}
            onChange={(val) => handleColorChange('backgroundColor', val, true)}
          />
          <ColorPicker
            label="–°–≤–æ–π —Ü–≤–µ—Ç"
            value={styles.backgroundColor || ''}
            onChange={(color) => handleColorChange('backgroundColor', color, false)}
          />
        </Tab>
        <Tab title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ">
          {/* ... */}
        </Tab>
      </Tabs>
    );
  },
};

export default withBlockFeatures(TextBlock, styles);