import React, { useState, useLayoutEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styles from './BlockToolbar.module.css';
import { useBlockManager } from '../../contexts/BlockManagementContext';
import { findBlockAndParent } from '../../utils/blockUtils';
import DropdownMenu from '../../ui/DropdownMenu';
import ToolbarButton from '../../ui/ToolbarButton';
import { DragHandleIcon } from '../../utils/icons';

const TOOLBAR_MARGIN = 8; // –û—Ç—Å—Ç—É–ø –æ—Ç –±–ª–æ–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
const portalRoot = document.getElementById('portal-root');

const BlockToolbar = ({ selectedBlock, targetRef, dragHandleListeners, children }) => {
  const toolbarRef = useRef(null);
  const [style, setStyle] = useState({ opacity: 0 }); // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

  const { blocks, actions } = useBlockManager();

  const blockInfo = findBlockAndParent(blocks, selectedBlock.id);
  const parent = blockInfo?.parent;
  const siblings = parent ? parent.children : blocks;
  const isFirst = blockInfo?.index === 0;
  const isLast = blockInfo?.index === siblings.length - 1;

  const menuItems = [
    {
      label: '–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫',
      icon: 'üóëÔ∏è',
      onClick: () => actions.delete(selectedBlock.id),
      isDestructive: true, // –î–æ–±–∞–≤–∏–º —Ñ–ª–∞–≥ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    },
    // –°—é–¥–∞ –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å "–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å", "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏" –∏ —Ç.–¥.
  ];

  const handleSwapUp = () => actions.swapBlock(selectedBlock.id, 'up');
  const handleSwapDown = () => actions.swapBlock(selectedBlock.id, 'down');
  const handleSelectParent = () => actions.select(parent.id);
  const handleToolbarClick = (e) => e.stopPropagation();

  useLayoutEffect(() => {
    if (!targetRef.current) return;

    const calculatePosition = () => {
      if (!targetRef.current || !toolbarRef.current) return;

      const targetRect = targetRef.current.getBoundingClientRect();
      const toolbarHeight = toolbarRef.current.offsetHeight;
      let topPosition;
      const position = 'fixed';

      const isBlockScrolledPast = targetRect.top < TOOLBAR_MARGIN;
      if (isBlockScrolledPast) {
        topPosition = TOOLBAR_MARGIN;
      } else {
        const topPositionAbove = targetRect.top - toolbarHeight - TOOLBAR_MARGIN;
        if (topPositionAbove > 0) {
          topPosition = topPositionAbove;
        } else {
          topPosition = targetRect.bottom + TOOLBAR_MARGIN;
        }
      }

      const leftPosition = targetRect.left + targetRect.width / 2;

      setStyle({
        position,
        top: `${topPosition}px`,
        left: `${leftPosition}px`,
        transform: 'translateX(-50%)',
        opacity: 1,
      });
    };

    calculatePosition();
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è "–∂–∏–≤–æ–≥–æ" —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    window.addEventListener('scroll', calculatePosition, true);
    window.addEventListener('resize', calculatePosition);

    return () => {
      window.removeEventListener('scroll', calculatePosition, true);
      window.removeEventListener('resize', calculatePosition);
    };
  }, [targetRef, selectedBlock.id, blockInfo?.index]);

  const toolbarContent = (
    <div ref={toolbarRef} className={styles.toolbar} style={style} onMouseDown={(e) => e.preventDefault()}>
      {/* –†—É—á–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è. dnd-kit —Å–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–µ —Å–æ–±—ã—Ç–∏—è. */}
      <div className={styles.dragHandle} {...dragHandleListeners}>
        <DragHandleIcon />
      </div>

      {/* –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ "—É–º–Ω—ã–µ" –∏ —Å–∞–º–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –≤—Å–ø–ª—ã—Ç–∏–µ */}
      <div className={styles.toolbarButtonGroup}>
        <ToolbarButton title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö" onClick={handleSwapUp} disabled={isFirst}>
          ‚Üë
        </ToolbarButton>
        <ToolbarButton title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑" onClick={handleSwapDown} disabled={isLast}>
          ‚Üì
        </ToolbarButton>
        {parent && (
          <ToolbarButton title="–í—ã–±—Ä–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è" onClick={handleSelectParent}>
            ‚§¥
          </ToolbarButton>
        )}
      </div>

      {React.Children.count(children) > 0 && (
        <div className={styles.toolbarSeparator} />
      )}

      {children}

      <div className={styles.toolbarSeparator} />

      {/* –û—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –≥—Ä—É–ø–ø–µ —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é */}
      <div className={styles.toolbarButtonGroup} onMouseDown={(e) => e.stopPropagation()}>
        <DropdownMenu triggerContent="‚ãÆ" items={menuItems} />
      </div>
    </div>
  );

  return ReactDOM.createPortal(toolbarContent, portalRoot);
};

export default BlockToolbar;