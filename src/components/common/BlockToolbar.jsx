import React, { useState, useLayoutEffect, useRef } from 'react';
import ReactDOM from 'react-dom';
import styles from './BlockToolbar.module.css';
import { useBlockManager } from '../../contexts/BlockManagementContext';
import { findBlockAndParent } from '../../utils/blockUtils';
import DropdownMenu from '../../ui/DropdownMenu';
import ToolbarButton from '../../ui/ToolbarButton';
import { DragHandleIcon } from '../../utils/icons';
import ToolbarButtonGroup from '../../ui/ToolbarButtonGroup';

const TOOLBAR_MARGIN = 8; // –û—Ç—Å—Ç—É–ø –æ—Ç –±–ª–æ–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
const portalRoot = document.getElementById('portal-root');

const BlockToolbar = ({ selectedBlock, targetRef, dragHandleListeners, children }) => {
  const toolbarRef = useRef(null);
  const [style, setStyle] = useState({ opacity: 0 }); // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–≤–∏–¥–∏–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

  const { blocks, actions, copiedStyles  } = useBlockManager();

  const blockInfo = findBlockAndParent(blocks, selectedBlock.id);
  const parent = blockInfo?.parent;
  const siblings = parent ? parent.children : blocks;
  const isFirst = blockInfo?.index === 0;
  const isLast = blockInfo?.index === siblings.length - 1;

  const menuItems = [
    {
      label: '–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å',
      icon: 'üìÑ',
      onClick: () => actions.duplicate(selectedBlock.id),
    },
    {
      label: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏',
      icon: 'üé®',
      onClick: () => actions.copyStyles(selectedBlock.id),
    },
    {
      label: '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏',
      icon: 'üñåÔ∏è',
      onClick: () => actions.pasteStyles(selectedBlock.id),
      // –î–µ–ª–∞–µ–º –ø—É–Ω–∫—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –µ—Å–ª–∏ –≤ "–±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞" –ø—É—Å—Ç–æ
      disabled: !copiedStyles,
    },
    { isSeparator: true }, // –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–≤–æ–π DropdownMenu —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
    {
      label: '–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫',
      icon: 'üóëÔ∏è',
      onClick: () => actions.delete(selectedBlock.id),
      isDestructive: true,
    },
  ];

  const handleSwapUp = () => actions.swap(selectedBlock.id, 'up');
  const handleSwapDown = () => actions.swap(selectedBlock.id, 'down');
  const handleSelectParent = () => actions.select(parent.id);

  useLayoutEffect(() => {
    // –í—ã–Ω–æ—Å–∏–º —É–∑–ª—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    const targetNode = targetRef.current;
    const toolbarNode = toolbarRef.current;

    // –ï—Å–ª–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —É–∑–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ —Å–∫—Ä—ã–≤–∞–µ–º —Ç—É–ª–±–∞—Ä
    if (!targetNode || !toolbarNode) {
      setStyle({ opacity: 0 });
      return;
    }

    const calculatePosition = () => {
      const targetRect = targetNode.getBoundingClientRect();
      const toolbarHeight = toolbarNode.offsetHeight;
      let topPosition;

      // –¢–≤–æ—è –ª–æ–≥–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      const isBlockScrolledPast = targetRect.top < TOOLBAR_MARGIN;
      if (isBlockScrolledPast) {
        topPosition = TOOLBAR_MARGIN;
      } else {
        const topPositionAbove = targetRect.top - toolbarHeight - TOOLBAR_MARGIN;
        topPosition = (topPositionAbove > 0)
          ? topPositionAbove
          : targetRect.bottom + TOOLBAR_MARGIN;
      }

      const leftPosition = targetRect.left + targetRect.width / 2;

      setStyle({
        position: 'fixed',
        top: `${topPosition}px`,
        left: `${leftPosition}px`,
        transform: 'translateX(-50%)',
        opacity: 1,
      });
    };

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    setTimeout(() => {
      calculatePosition();
    }, 150);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è "–∂–∏–≤–æ–≥–æ" —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    window.addEventListener('scroll', calculatePosition, true);
    window.addEventListener('resize', calculatePosition);

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
    return () => {
      window.removeEventListener('scroll', calculatePosition, true);
      window.removeEventListener('resize', calculatePosition);
    };
  }, [
    targetRef.current,    // <-- –ì–õ–ê–í–ù–´–ô –§–ò–ö–°: —Ç–µ–ø–µ—Ä—å —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è, –∫–æ–≥–¥–∞ —É–∑–µ–ª –ø–æ—è–≤–∏—Ç—Å—è
    selectedBlock.id,     // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
    blocks
  ]);

  const toolbarContent = (
    <div
      ref={toolbarRef}
      className={styles.toolbar}
      style={style}
      // onMouseDown={(e) => {
      //   e.stopPropagation();
      //   e.preventDefault();
      // }}
      onClick={(e) => e.stopPropagation()}
    >
      {/* –†—É—á–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è. dnd-kit —Å–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–µ —Å–æ–±—ã—Ç–∏—è. */}
      <div className={styles.dragHandle} {...dragHandleListeners}>
        <DragHandleIcon />
      </div>

      <ToolbarButtonGroup>
        <ToolbarButton title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö" onClick={handleSwapUp} disabled={isFirst}>
          ‚Üë
        </ToolbarButton>
        <ToolbarButton title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑" onClick={handleSwapDown} disabled={isLast}>
          ‚Üì
        </ToolbarButton>
        {parent && (
          <ToolbarButton title="–í—ã–±—Ä–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è" onClick={handleSelectParent}>
            ‚§¥
          </ToolbarButton>
        )}
      </ToolbarButtonGroup>

      {React.Children.count(children) > 0 && (
        <div className={styles.toolbarSeparator} />
      )}

      {children}

      <div className={styles.toolbarSeparator} />

      <ToolbarButtonGroup>
        <DropdownMenu triggerContent="‚ãÆ" items={menuItems} />
      </ToolbarButtonGroup>
    </div>
  );

  return ReactDOM.createPortal(toolbarContent, portalRoot);
};

export default BlockToolbar;