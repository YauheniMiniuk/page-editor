import { useState, useCallback, useMemo } from 'react'; // –î–æ–±–∞–≤–ª—è–µ–º useMemo
import {
  removeBlockRecursive,
  updateBlockRecursive,
  insertBlockRecursive,
  findBlockAndParent,
  swapBlocksRecursive,
  addListItem,
  indentListItem,
  removeListItem,
  outdentListItem,
  transformBlock,
  updateListItemContent
} from '../utils/blockUtils';

const useBlockManagement = (initialBlocks = []) => {
  const [blocks, setBlocks] = useState(initialBlocks);
  const [selectedBlockId, setSelectedBlockId] = useState(null);
  const [activeId, setActiveId] = useState(null);
  const [activeDragItem, setActiveDragItem] = useState(null);
  const [overDropZone, setOverDropZone] = useState(null);
  const [focusRequest, setFocusRequest] = useState(null);
  const [isInlineEditing, setIsInlineEditing] = useState(false);

  // –í—Å–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
  const handleDeleteBlock = useCallback((id) => {
    if (selectedBlockId === id) setSelectedBlockId(null);
    setBlocks(prev => removeBlockRecursive(prev, id));
  }, [selectedBlockId]);

  const handleUpdateBlock = useCallback((id, newProps) => {
    setBlocks(prev => updateBlockRecursive(prev, id, newProps));
  }, []);

  const handleAddBlock = useCallback((targetId, blockToInsert, position) => {
    setBlocks(prev => insertBlockRecursive(prev, targetId, blockToInsert, position));
  }, []);

  const handleSelectParent = useCallback((childId) => {
    console.log("–í—ã–±–∏—Ä–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–ª–æ–∫");
    const info = findBlockAndParent(blocks, childId);
    if (info && info.parent) setSelectedBlockId(info.parent.id);
  }, [blocks]);

  const handleSelectSibling = useCallback((siblingId, direction = 'next') => {
    console.log("–í—ã–±–∏—Ä–∞–µ–º ", direction, "–±–ª–æ–∫");
    const info = findBlockAndParent(blocks, siblingId);
    if (!info) return;
    const siblings = info.parent ? info.parent.children : blocks;
    const newIndex = direction === 'next' ? info.index + 1 : info.index - 1;
    if (newIndex >= 0 && newIndex < siblings.length) {
      setSelectedBlockId(siblings[newIndex].id);
    }
  }, [blocks]);

  const swapBlock = useCallback((blockId, direction) => {
    setBlocks(prev => swapBlocksRecursive(prev, blockId, direction));
  }, []);

  const handleAddListItem = useCallback((currentItemId) => {
    const { newBlocks, newItemId } = addListItem(blocks, currentItemId);
    setBlocks(newBlocks);
    console.log(`üöÄ –ó–ê–ü–†–û–° –§–û–ö–£–°–ê: –°–æ–∑–¥–∞–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ${newItemId}`);
    setFocusRequest({ targetId: newItemId, position: 'start' });
  }, [blocks]);

  const handleRemoveListItem = useCallback((currentItemId) => {
    const { newBlocks, prevItemId } = removeListItem(blocks, currentItemId);
    setBlocks(newBlocks);
    if (prevItemId) {
      console.log(`üöÄ –ó–ê–ü–†–û–° –§–û–ö–£–°–ê: –°–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ ${prevItemId}`);
      setFocusRequest({ targetId: prevItemId, position: 'end' });
    }
  }, [blocks]);

  const handleIndentListItem = useCallback((currentItemId) => {
    setBlocks(prev => indentListItem(prev, currentItemId));
    console.log(`üöÄ –ó–ê–ü–†–û–° –§–û–ö–£–°–ê: –°–æ–∑–¥–∞–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${currentItemId} –ø–æ—Å–ª–µ –æ—Ç—Å—Ç—É–ø–∞`);
    setFocusRequest({ targetId: currentItemId, position: 'start' });
  }, []);

  const handleOutdentListItem = useCallback((currentItemId) => {
    setBlocks(prev => outdentListItem(prev, currentItemId));
    console.log(`üöÄ –ó–ê–ü–†–û–° –§–û–ö–£–°–ê: –°–æ–∑–¥–∞–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ ${currentItemId} –ø–æ—Å–ª–µ –æ—Ç—Å—Ç—É–ø–∞`);
    setFocusRequest({ targetId: currentItemId, position: 'start' });
  }, []);

  const handleUpdateListItemContent = useCallback((itemId, newContent) => {
    setBlocks(prev => updateListItemContent(prev, itemId, newContent));
  }, []);

  const handleTransformBlock = useCallback((blockId, newType) => {
    setBlocks(prev => transformBlock(prev, blockId, newType));
  }, []);

  const handleSetIsInlineEditing = useCallback((isEditing) => {
        console.log(`‚úçÔ∏è –†–µ–∂–∏–º inline-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${isEditing ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù'}`);
        setIsInlineEditing(isEditing);
    }, []);

  const actions = useMemo(() => ({
    update: handleUpdateBlock,
    delete: handleDeleteBlock,
    add: handleAddBlock,
    select: setSelectedBlockId,
    selectParent: handleSelectParent,
    selectSibling: handleSelectSibling,
    setBlocks: setBlocks,
    setActiveId: setActiveId,
    swapBlock,
    addListItem: handleAddListItem,
    indentListItem: handleIndentListItem,
    removeListItem: handleRemoveListItem,
    outdentListItem: handleOutdentListItem,
    updateListItemContent: handleUpdateListItemContent,
    transformBlock: handleTransformBlock,
    clearFocusRequest: () => {
      console.log("üîÑ –°–±—Ä–æ—Å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–æ–∫—É—Å");
      setFocusRequest(null)
    },
    setInlineEditing: handleSetIsInlineEditing,
    setOverDropZone,

  }), [
    handleUpdateBlock,
    handleDeleteBlock,
    handleAddBlock,
    setSelectedBlockId,
    handleSelectParent,
    handleSelectSibling,
    setBlocks,
    setActiveId,
    swapBlock,
    handleAddListItem,
    handleIndentListItem,
    handleRemoveListItem,
    handleOutdentListItem,
    handleTransformBlock,
    handleUpdateListItemContent,
    handleTransformBlock,
    setOverDropZone,
  ]);

  return {
    blocks,
    selectedBlockId,
    activeId,
    activeDragItem,
    setActiveDragItem,
    overDropZone,
    focusRequest,
    isInlineEditing,
    actions,
  };
};

export default useBlockManagement;